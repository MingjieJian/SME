# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application
 
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-15, macos-13]   # macos-15/14=arm64ï¼Œmacos-13=x86_64
        py: ['3.8','3.9','3.10','3.11','3.12','3.13']
    name: py${{ matrix.py }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     include:
    #       - name: ubuntu
    #         runs_on: ubuntu-latest
    #       - name: macos-intel
    #         runs_on: macos-13
    #       - name: macos-apple-silicon
    #         runs_on: macos-15
    # runs-on: ${{ matrix.runs_on }}
    environment: release
    permissions:
      contents: write
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # - name: Install autoconf and gfortran (libgfortran) on macOS (GCC route)
      #   if: ${{ matrix.name == 'macos-intel' || matrix.name == 'macos-apple-silicon' }}
      #   run: |
      #     brew update
      #     # brew install autoconf automake libtool gcc
      #     # brew link --force gcc
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}
        run: |
          python -V
          python -c "import sys, sysconfig; print(sys.executable); print(sysconfig.get_platform())"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          pip install -r requirements.txt
          python setup.py version
          pip install .

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: pytest

      - name: GitHub Tag
        if: github.event_name != 'pull_request' && matrix.name == 'ubuntu'
        id: tag_release
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v4
        if: github.event_name != 'pull_request' && matrix.name == 'ubuntu'
        with:
          ref: ${{ steps.tag_release.outputs.new_tag }}
          clean: false

      - name: Build Wheel
        if: matrix.name == 'ubuntu'
        # run: pip install wheel && python setup.py sdist bdist_wheel
        run: |
          python -m pip install -U pip
          python -m pip install -U setuptools wheel build
          python -m build

      - name: Zip data
        if: matrix.name == 'ubuntu'
        id: zip_data
        run: zip -r dist dist && echo "::set-output name=filename::dist.zip"

      - name: Create Release
        if: github.event_name != 'pull_request' && matrix.name == 'ubuntu'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.tag_release.outputs.new_tag }}
          release_name: Release ${{ steps.tag_release.outputs.new_tag }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: github.event_name != 'pull_request' && matrix.name == 'ubuntu'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./dist.zip
          asset_name: dist.zip
          asset_content_type: application/zip

      - name: Publish a Python distribution to PyPI
        if: github.event_name != 'pull_request' && matrix.name == 'ubuntu'
        uses: pypa/gh-action-pypi-publish@release/v1
        # with:
        #   user: __token__
        #   password: ${{ secrets.pypi_password }}
